// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth compatible User model
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false) @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Better Auth relations
  accounts      Account[]
  sessions      Session[]
  
  // Application specific relations
  portfolios    Portfolio[]
  notifications Notification[]

  @@map("user")
}

// Better Auth Account model
model Account {
  id                String  @id @default(cuid())
  accountId         String  @map("account_id")
  providerId        String  @map("provider_id") 
  userId            String  @map("user_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  idToken           String? @map("id_token")
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

// Better Auth Session model  
model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// Better Auth Verification model
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verification")
}

// Portfolio model for user's financial baskets
model Portfolio {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  totalValue  Decimal  @default(0) @map("total_value") @db.Decimal(15, 2)
  currency    String   @default("TRY") // Base currency for calculations
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      Asset[]

  @@map("portfolios")
}

// Asset types enum
enum AssetType {
  CRYPTO
  GOLD
  CURRENCY
  INDEX
}

// Asset model for individual holdings in portfolios
model Asset {
  id          String    @id @default(cuid())
  portfolioId String    @map("portfolio_id")
  symbol      String    // e.g., "BTC", "GRA", "USD", "XU100"
  type        AssetType
  quantity    Decimal   @db.Decimal(15, 8)
  basePrice   Decimal   @map("base_price") @db.Decimal(15, 2) // Average purchase price
  currentValue Decimal  @default(0) @map("current_value") @db.Decimal(15, 2)
  profitLoss  Decimal   @default(0) @map("profit_loss") @db.Decimal(15, 2)
  profitLossPercent Decimal @default(0) @map("profit_loss_percent") @db.Decimal(5, 2)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  transactions AssetTransaction[]

  @@map("assets")
}

// Asset transaction model for tracking buy/sell operations
enum TransactionType {
  BUY
  SELL
}

model AssetTransaction {
  id          String          @id @default(cuid())
  assetId     String          @map("asset_id")
  type        TransactionType
  quantity    Decimal         @db.Decimal(15, 8)
  price       Decimal         @db.Decimal(15, 2)
  totalAmount Decimal         @map("total_amount") @db.Decimal(15, 2)
  fees        Decimal         @default(0) @db.Decimal(15, 2)
  note        String?
  createdAt   DateTime        @default(now()) @map("created_at")
  
  // Relations
  asset       Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_transactions")
}

// Price snapshot model for historical price data
model PriceSnapshot {
  id        String   @id @default(cuid())
  symbol    String
  type      AssetType
  price     Decimal  @db.Decimal(15, 2)
  priceUSD  Decimal? @map("price_usd") @db.Decimal(15, 2)
  change24h Decimal? @map("change_24h") @db.Decimal(5, 2)
  timestamp DateTime @default(now())
  source    String   @default("truncgil") // Data source identifier
  
  @@map("price_snapshots")
  @@index([symbol, timestamp])
  @@index([type, timestamp])
}

// Notification model for user alerts
enum NotificationType {
  PRICE_ALERT
  PORTFOLIO_UPDATE
  SYSTEM_MESSAGE
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  data      Json?            // Additional notification data
  createdAt DateTime         @default(now()) @map("created_at")
  
  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Price alert model for user-defined price alerts
model PriceAlert {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  symbol        String
  type          AssetType
  targetPrice   Decimal   @map("target_price") @db.Decimal(15, 2)
  condition     String    // "above" or "below"
  isActive      Boolean   @default(true) @map("is_active")
  isTriggered   Boolean   @default(false) @map("is_triggered")
  triggeredAt   DateTime? @map("triggered_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@map("price_alerts")
}
